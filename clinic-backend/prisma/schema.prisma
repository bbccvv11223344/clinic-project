// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  DOCTOR
  MEDICAL_STAFF
  PATIENT
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum ConsultationStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  role      UserRole @default(PATIENT)
  avatar    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  patientAppointments    Appointment[] @relation("PatientAppointments")
  doctorAppointments     Appointment[] @relation("DoctorAppointments")
  patientConsultations   Consultation[] @relation("PatientConsultations")
  doctorConsultations    Consultation[] @relation("DoctorConsultations")
  beforeAfterResults     BeforeAfterResult[]
  reviews                Review[]
  
  @@map("users")
}

model Appointment {
  id          String            @id @default(cuid())
  userId      String
  doctorId    String
  date        DateTime
  time        String
  status      AppointmentStatus @default(PENDING)
  notes       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  user        User              @relation("PatientAppointments", fields: [userId], references: [id])
  doctor      User              @relation("DoctorAppointments", fields: [doctorId], references: [id])
  
  @@map("appointments")
}

model Consultation {
  id          String             @id @default(cuid())
  userId      String
  doctorId    String
  title       String
  description String
  status      ConsultationStatus @default(ACTIVE)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  // Relations
  user        User               @relation("PatientConsultations", fields: [userId], references: [id])
  doctor      User               @relation("DoctorConsultations", fields: [doctorId], references: [id])
  messages    ConsultationMessage[]
  
  @@map("consultations")
}

model ConsultationMessage {
  id             String       @id @default(cuid())
  consultationId String
  senderId       String
  message        String
  attachments    String[]     @default([])
  createdAt      DateTime     @default(now())

  // Relations
  consultation   Consultation @relation(fields: [consultationId], references: [id])
  
  @@map("consultation_messages")
}

model BeforeAfterResult {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  beforeImage String
  afterImage  String
  procedure   String
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id])
  
  @@map("before_after_results")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  rating    Int      @db.SmallInt
  comment   String?
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  
  @@map("reviews")
}

model Service {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float?
  duration    Int?     // in minutes
  isActive    Boolean  @default(true)
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("services")
}

model BlogPost {
  id          String   @id @default(cuid())
  title       String
  content     String
  excerpt     String?
  image       String?
  slug        String   @unique
  isPublished Boolean  @default(false)
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("blog_posts")
}

model Setting {
  id    String @id @default(cuid())
  key   String @unique
  value String
  
  @@map("settings")
}

